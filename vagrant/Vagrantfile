# -*- mode: ruby -*-
# vi: set ft=ruby :

unless Vagrant.has_plugin?("vagrant-docker-compose")
  system("vagrant plugin install vagrant-docker-compose")
  puts "Dependencies installed, please try the command again."
  exit
end

# All Vagrant configuration is done below. 
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

  config.vm.provider :virtualbox do |vb|
    vb.name = "JRA Dev Environment"
    vb.customize ["modifyvm", :id, "--memory", "2000"]
  end

  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Define the default values
  #
  # These values will be used if the user has not provided an override environment variable.
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  #define default values for environment variables
  default_local_git_projects_dir = "~/dev-env/git/"
  default_local_apps_dir = "~/dev-env/apps/"
  default_local_maven_conf_dir = "~/dev-env/maven/conf/"
  default_local_maven_repo_dir = "~/dev-env/maven/.m2"
  default_local_aws_dir = "~/dev-env/aws/"
  default_local_aws_key_file_dir = "~/dev-env/aws-keys/"
  default_local_share_dir = "~/dev-env/share/"

  default_vm_git_projects_dir = "/home/vagrant/git"
  default_vm_apps_dir = "/home/vagrant/workspace/apps"
  default_vm_maven_conf_dir = "/home/vagrant/workspace/maven/conf"
  default_vm_maven_repo_dir = "/home/vagrant/.m2"
  default_vm_aws_dir = "/home/vagrant/.aws"
  default_vm_aws_key_file_dir = "/home/vagrant/aws-keys"
  default_vm_share_dir = "/home/vagrant/share"

  default_aws_key_file_name = "jra-build.pem"
  
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Set Variables to be used for local machines and dev env VMs.
  #
  # If an override environment variable exists on the local machine, it will use that.  Otherwise, it will set a default for each variable.
  #
  # Users can customize their dev environment VM by eithe A - Setting override environment variables on their shell
  # or B - passing the variables to the vagrant up command.
  #
  # See this page for the override environment variable names:
  #    https://github.com/pentaho-jrice/pentaho-dev-env/tree/master/vagrant
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  local_git_projects_dir = ENV['DEV_ENV_LOCAL_GIT_PROJECTS_DIR'] ? ENV['DEV_ENV_LOCAL_GIT_PROJECTS_DIR'] : "#{default_local_git_projects_dir}"
  local_apps_dir = ENV['DEV_ENV_LOCAL_APPS_DIR'] ? ENV['DEV_ENV_LOCAL_APPS_DIR'] : "#{default_local_apps_dir}"
  local_maven_conf_dir = ENV['DEV_ENV_LOCAL_MAVEN_CONF_DIR'] ? ENV['DEV_ENV_LOCAL_MAVEN_CONF_DIR'] : "#{default_local_maven_conf_dir}"
  local_maven_repo_dir = ENV['DEV_ENV_LOCAL_MAVEN_REPO_DIR'] ? ENV['DEV_ENV_LOCAL_MAVEN_REPO_DIR'] : "#{default_local_maven_repo_dir}"
  local_aws_dir = ENV['DEV_ENV_LOCAL_AWS_DIR'] ? ENV['DEV_ENV_LOCAL_AWS_DIR'] : "#{default_local_aws_dir}"
  local_aws_key_file_dir = ENV['DEV_ENV_LOCAL_AWS_KEY_FILE_DIR'] ? ENV['DEV_ENV_LOCAL_AWS_KEY_FILE_DIR'] : "#{default_local_aws_key_file_dir}"
  local_share_dir = ENV['DEV_ENV_LOCAL_SHARE_DIR'] ? ENV['DEV_ENV_LOCAL_SHARE_DIR'] : "#{default_local_share_dir}"

  vm_git_projects_dir = ENV['DEV_ENV_VM_GIT_PROJECTS_DIR'] ? ENV['DEV_ENV_VM_GIT_PROJECTS_DIR'] : "#{default_vm_git_projects_dir}"
  vm_apps_dir = ENV['DEV_ENV_VM_APPS_DIR'] ? ENV['DEV_ENV_VM_APPS_DIR'] : "#{default_vm_apps_dir}"
  vm_maven_conf_dir = ENV['DEV_ENV_VM_MAVEN_CONF_DIR'] ? ENV['DEV_ENV_VM_MAVEN_CONF_DIR'] : "#{default_vm_maven_conf_dir}"
  vm_maven_repo_dir = ENV['DEV_ENV_VM_MAVEN_REPO_DIR'] ? ENV['DEV_ENV_VM_MAVEN_REPO_DIR'] : "#{default_vm_maven_repo_dir}"
  vm_aws_dir = ENV['DEV_ENV_VM_AWS_DIR'] ? ENV['DEV_ENV_VM_AWS_DIR'] : "#{default_vm_aws_dir}"
  vm_aws_key_file_dir = ENV['DEV_ENV_VM_AWS_KEY_FILE_DIR'] ? ENV['DEV_ENV_VM_AWS_KEY_FILE_DIR'] : "#{default_vm_aws_key_file_dir}"
  vm_share_dir = ENV['DEV_ENV_VM_SHARE_DIR'] ? ENV['DEV_ENV_VM_SHARE_DIR'] : "#{default_vm_share_dir}"

  aws_key_file_name = ENV['DEV_ENV_AWS_KEY_FILE_NAME'] ? ENV['DEV_ENV_AWS_KEY_FILE_NAME'] : "#{default_aws_key_file_name}"
  
  vm_aws_key_file_path = ENV['DEV_ENV_AWS_KEY_FILE_PATH'] ? ENV['DEV_ENV_AWS_KEY_FILE_NAME'] : "#{vm_aws_key_file_dir}/#{aws_key_file_name}"

  vm_aws_access_key_id = ENV['AWS_ACCESS_KEY']
  vm_aws_secret_access_key = ENV['AWS_SECRET_KEY']


  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Export the environment variables to the dev-env VM.
  #
  # Note:  the env variable names set in the VM will not be the same as the ones set in the local enviornment.
  # See this page for what env variables will be set on the VM.  And what environment variables they map to on the local machine:
  #    https://github.com/pentaho-jrice/pentaho-dev-env/tree/master/vagrant
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  config.vm.provision :shell, inline: "rm -f /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export GIT_PROJECTS_DIR=#{vm_git_projects_dir}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export APPS_DIR=#{vm_apps_dir}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export MAVEN_CONF_DIR=#{vm_maven_conf_dir}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export MAVEN_REPO_DIR=#{vm_maven_repo_dir}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export AWS_DIR=#{vm_aws_dir}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export AWS_KEY_FILE_DIR=#{vm_aws_key_file_dir}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export AWS_KEY_FILE_NAME=#{aws_key_file_name}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export AWS_KEY_FILE_PATH=#{vm_aws_key_file_path}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export SHARE_DIR=#{vm_share_dir}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"

  config.vm.provision :shell, inline: "echo \"export AWS_ACCESS_KEY=#{vm_aws_access_key_id}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export AWS_SECRET_KEY=#{vm_aws_secret_access_key}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"

  config.vm.provision :shell, inline: "echo \"export SCRIPTS_DIR_COMMON=$GIT_PROJECTS_DIR/pentaho-dev-env/scripts/common/linux\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export SCRIPTS_DIR_DEV_VM=$GIT_PROJECTS_DIR/pentaho-dev-env/scripts/dev-vm/linux\" >> /etc/profile.d/dev-env-vars.sh", run: "always"

  config.vm.provision :shell, inline: "echo \"export PATH=$PATH:$SCRIPTS_DIR_COMMON:$SCRIPTS_DIR_DEV_VM\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Set up synced folders between local machine and dev-env VM.
  #
  # Note:  the env variable names set in the VM will not be the same as the ones set in the local enviornment.
  # See this page for what env variables will be set on the VM.  And what environment variables they map to on the local machine:
  #    https://github.com/pentaho-jrice/pentaho-dev-env/tree/master/vagrant
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  config.vm.synced_folder "#{local_git_projects_dir}", "#{vm_git_projects_dir}", create: true
  config.vm.synced_folder "#{local_apps_dir}", "#{vm_apps_dir}", create: true
  config.vm.synced_folder "#{local_maven_conf_dir}", "#{vm_maven_conf_dir}", create: true
  config.vm.synced_folder "#{local_maven_repo_dir}", "#{vm_maven_repo_dir}", create: true
  config.vm.synced_folder "#{local_aws_dir}", "#{vm_aws_dir}", create: true
  config.vm.synced_folder "#{local_aws_key_file_dir}", "#{vm_aws_key_file_dir}", create: true, mount_options: ["dmode=777", "fmode=400"]
  config.vm.synced_folder "#{local_share_dir}", "#{vm_share_dir}", create: true

  config.vm.provision :shell, inline: 'wget --no-check-certificate https://github.com/aglover/ubuntu-equip/raw/master/equip_java8.sh && bash equip_java8.sh'

  config.vm.provision :docker
  config.vm.provision :docker_compose

  config.vm.provision "shell", path: "provision/setup.sh"

  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Expose 10 general purpose ports between from dev vm to local.
  #
  # These ports are exposed so you can run 10 arbitrary apps in dev vm and 
  # expose the ports to local machine without having to touch any configuration.
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  config.vm.network "forwarded_port", guest: 9090, host: 9090
  config.vm.network "forwarded_port", guest: 9190, host: 9190
  config.vm.network "forwarded_port", guest: 9290, host: 9290
  config.vm.network "forwarded_port", guest: 9390, host: 9390
  config.vm.network "forwarded_port", guest: 9490, host: 9490
  config.vm.network "forwarded_port", guest: 9590, host: 9590
  config.vm.network "forwarded_port", guest: 9690, host: 9690
  config.vm.network "forwarded_port", guest: 9790, host: 9790
  config.vm.network "forwarded_port", guest: 9890, host: 9890
  config.vm.network "forwarded_port", guest: 9990, host: 9990

end
